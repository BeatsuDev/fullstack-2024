// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Kazoot
 * An application
 *
 * OpenAPI spec version: 1.0.0
 * Contact: vkbugge@hotmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AnswerDTO } from '../models';
import { QuestionAttempt } from '../models';
import { QuizAttempt } from '../models';
/**
 * AttemptApi - axios parameter creator
 * @export
 */
export const AttemptApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Attempt a quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attemptQuiz: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling attemptQuiz.');
            }
            const localVarPath = `/quiz/{id}/attempt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all attempts (by the user) for a given quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttempts: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAttempts.');
            }
            const localVarPath = `/quiz/{id}/attempt`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit quiz attempt
         * @param {AnswerDTO} body 
         * @param {string} id The ID of a quiz
         * @param {string} quizAttempt The ID of a quiz attempt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        quizIdAttemptQuizAttemptPost: async (body: AnswerDTO, id: string, quizAttempt: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling quizIdAttemptQuizAttemptPost.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling quizIdAttemptQuizAttemptPost.');
            }
            // verify required parameter 'quizAttempt' is not null or undefined
            if (quizAttempt === null || quizAttempt === undefined) {
                throw new RequiredError('quizAttempt','Required parameter quizAttempt was null or undefined when calling quizIdAttemptQuizAttemptPost.');
            }
            const localVarPath = `/quiz/{id}/attempt/{quizAttempt}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"quizAttempt"}}`, encodeURIComponent(String(quizAttempt)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttemptApi - functional programming interface
 * @export
 */
export const AttemptApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Attempt a quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attemptQuiz(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QuizAttempt>>> {
            const localVarAxiosArgs = await AttemptApiAxiosParamCreator(configuration).attemptQuiz(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all attempts (by the user) for a given quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttempts(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<QuizAttempt>>>> {
            const localVarAxiosArgs = await AttemptApiAxiosParamCreator(configuration).getAttempts(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Submit quiz attempt
         * @param {AnswerDTO} body 
         * @param {string} id The ID of a quiz
         * @param {string} quizAttempt The ID of a quiz attempt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizIdAttemptQuizAttemptPost(body: AnswerDTO, id: string, quizAttempt: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<QuestionAttempt>>> {
            const localVarAxiosArgs = await AttemptApiAxiosParamCreator(configuration).quizIdAttemptQuizAttemptPost(body, id, quizAttempt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AttemptApi - factory interface
 * @export
 */
export const AttemptApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Attempt a quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attemptQuiz(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QuizAttempt>> {
            return AttemptApiFp(configuration).attemptQuiz(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all attempts (by the user) for a given quiz
         * @param {string} id The ID of a quiz
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttempts(id: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<QuizAttempt>>> {
            return AttemptApiFp(configuration).getAttempts(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit quiz attempt
         * @param {AnswerDTO} body 
         * @param {string} id The ID of a quiz
         * @param {string} quizAttempt The ID of a quiz attempt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async quizIdAttemptQuizAttemptPost(body: AnswerDTO, id: string, quizAttempt: string, options?: AxiosRequestConfig): Promise<AxiosResponse<QuestionAttempt>> {
            return AttemptApiFp(configuration).quizIdAttemptQuizAttemptPost(body, id, quizAttempt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttemptApi - object-oriented interface
 * @export
 * @class AttemptApi
 * @extends {BaseAPI}
 */
export class AttemptApi extends BaseAPI {
    /**
     * Attempt a quiz
     * @param {string} id The ID of a quiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttemptApi
     */
    public async attemptQuiz(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QuizAttempt>> {
        return AttemptApiFp(this.configuration).attemptQuiz(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all attempts (by the user) for a given quiz
     * @param {string} id The ID of a quiz
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttemptApi
     */
    public async getAttempts(id: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<QuizAttempt>>> {
        return AttemptApiFp(this.configuration).getAttempts(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Submit quiz attempt
     * @param {AnswerDTO} body 
     * @param {string} id The ID of a quiz
     * @param {string} quizAttempt The ID of a quiz attempt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttemptApi
     */
    public async quizIdAttemptQuizAttemptPost(body: AnswerDTO, id: string, quizAttempt: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<QuestionAttempt>> {
        return AttemptApiFp(this.configuration).quizIdAttemptQuizAttemptPost(body, id, quizAttempt, options).then((request) => request(this.axios, this.basePath));
    }
}
